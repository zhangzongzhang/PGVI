PGVI.cpp:		packingSetManager->packingSetTimer.start();
PGVI.cpp:		packingSetManager->packingSetTimer.pause();
PGVI.cpp:						packingSetManager->packingSetTimer.resume();
PGVI.cpp:						packingSetManager->addBeliefsToPacking(sampledBeliefs, beliefCacheSet);
PGVI.cpp:						packingSetManager->packingSetTimer.pause();
PGVI.cpp:					packingSetManager->packingSetTimer.resume();
PGVI.cpp:					packingSetManager->addBeliefsToPackingSet(sampledBeliefs, beliefCacheSet, numBackups);
PGVI.cpp:					packingSetManager->packingSetTimer.pause();
PGVI.cpp:					//packingSetManager->addBeliefsToPacking(sampledBeliefs, beliefCacheSet);
PGVI.cpp:					packingSetManager->packingSetTimer.resume();
PGVI.cpp:					packingSetManager->addBeliefsToPacking(sampledBeliefs, beliefCacheSet);
PGVI.cpp:					packingSetManager->packingSetTimer.pause();
PGVI.cpp:	packingSetManager->printPackingSetSize();
PGVI.cpp:	printf("Time used in PackingSetManager: %f\n", packingSetManager->packingSetTimer.elapsed());
PGVI.cpp:	cout.width(9);cout << left << packingSetManager->getUniquePackingSize();
SampleBP.cpp:			solver->packingSetManager->resetDelta(newDelta); 
SampleBP.cpp:			newIndexRow = solver->packingSetManager->getTheClosestBeliefInPacking(deltaForConvergence, newIndexRow, depthArr[currentRoot] + 1, solver->beliefCacheSet);
SampleBP.cpp:					solver->packingSetManager->packingSetTimer.resume();	
SampleBP.cpp:					double distance = solver->packingSetManager->calculateWeightedMinimumDistanceBetweenBeliefAndPacking(sn.cacheIndex, depthArr[currentRoot] + 1, solver->beliefCacheSet, solver->numBackups);
SampleBP.cpp:					solver->packingSetManager->packingSetTimer.pause();
